import cv2
import cv2.typing
import typing


# Enumerations
POINT_SIZE: int
OPACITY: int
LINE_WIDTH: int
FONT_SIZE: int
REPRESENTATION: int
IMMEDIATE_RENDERING: int
SHADING: int
AMBIENT: int
LIGHTING: int
RenderingProperties = int
"""One of [POINT_SIZE, OPACITY, LINE_WIDTH, FONT_SIZE, REPRESENTATION, IMMEDIATE_RENDERING, SHADING, AMBIENT, LIGHTING]"""

REPRESENTATION_POINTS: int
REPRESENTATION_WIREFRAME: int
REPRESENTATION_SURFACE: int
RepresentationValues = int
"""One of [REPRESENTATION_POINTS, REPRESENTATION_WIREFRAME, REPRESENTATION_SURFACE]"""

SHADING_FLAT: int
SHADING_GOURAUD: int
SHADING_PHONG: int
ShadingValues = int
"""One of [SHADING_FLAT, SHADING_GOURAUD, SHADING_PHONG]"""


Mesh_LOAD_AUTO: int
MESH_LOAD_AUTO: int
Mesh_LOAD_PLY: int
MESH_LOAD_PLY: int
Mesh_LOAD_OBJ: int
MESH_LOAD_OBJ: int

WTrajectory_FRAMES: int
WTRAJECTORY_FRAMES: int
WTrajectory_PATH: int
WTRAJECTORY_PATH: int
WTrajectory_BOTH: int
WTRAJECTORY_BOTH: int

KeyboardEvent_NONE: int
KEYBOARD_EVENT_NONE: int
KeyboardEvent_ALT: int
KEYBOARD_EVENT_ALT: int
KeyboardEvent_CTRL: int
KEYBOARD_EVENT_CTRL: int
KeyboardEvent_SHIFT: int
KEYBOARD_EVENT_SHIFT: int

KeyboardEvent_KEY_UP: int
KEYBOARD_EVENT_KEY_UP: int
KeyboardEvent_KEY_DOWN: int
KEYBOARD_EVENT_KEY_DOWN: int
KeyboardEvent_Action = int
"""One of [KeyboardEvent_KEY_UP, KEYBOARD_EVENT_KEY_UP, KeyboardEvent_KEY_DOWN, KEYBOARD_EVENT_KEY_DOWN]"""

MouseEvent_MouseMove: int
MOUSE_EVENT_MOUSE_MOVE: int
MouseEvent_MouseButtonPress: int
MOUSE_EVENT_MOUSE_BUTTON_PRESS: int
MouseEvent_MouseButtonRelease: int
MOUSE_EVENT_MOUSE_BUTTON_RELEASE: int
MouseEvent_MouseScrollDown: int
MOUSE_EVENT_MOUSE_SCROLL_DOWN: int
MouseEvent_MouseScrollUp: int
MOUSE_EVENT_MOUSE_SCROLL_UP: int
MouseEvent_MouseDblClick: int
MOUSE_EVENT_MOUSE_DBL_CLICK: int
MouseEvent_Type = int
"""One of [MouseEvent_MouseMove, MOUSE_EVENT_MOUSE_MOVE, MouseEvent_MouseButtonPress, MOUSE_EVENT_MOUSE_BUTTON_PRESS, MouseEvent_MouseButtonRelease, MOUSE_EVENT_MOUSE_BUTTON_RELEASE, MouseEvent_MouseScrollDown, MOUSE_EVENT_MOUSE_SCROLL_DOWN, MouseEvent_MouseScrollUp, MOUSE_EVENT_MOUSE_SCROLL_UP, MouseEvent_MouseDblClick, MOUSE_EVENT_MOUSE_DBL_CLICK]"""

MouseEvent_NoButton: int
MOUSE_EVENT_NO_BUTTON: int
MouseEvent_LeftButton: int
MOUSE_EVENT_LEFT_BUTTON: int
MouseEvent_MiddleButton: int
MOUSE_EVENT_MIDDLE_BUTTON: int
MouseEvent_RightButton: int
MOUSE_EVENT_RIGHT_BUTTON: int
MouseEvent_VScroll: int
MOUSE_EVENT_VSCROLL: int
MouseEvent_MouseButton = int
"""One of [MouseEvent_NoButton, MOUSE_EVENT_NO_BUTTON, MouseEvent_LeftButton, MOUSE_EVENT_LEFT_BUTTON, MouseEvent_MiddleButton, MOUSE_EVENT_MIDDLE_BUTTON, MouseEvent_RightButton, MOUSE_EVENT_RIGHT_BUTTON, MouseEvent_VScroll, MOUSE_EVENT_VSCROLL]"""

WTrajectory_FRAMES: int
WTRAJECTORY_FRAMES: int
WTrajectory_PATH: int
WTRAJECTORY_PATH: int
WTrajectory_BOTH: int
WTRAJECTORY_BOTH: int


# Classes
class Mesh:
    cloud: cv2.typing.MatLike
    colors: cv2.typing.MatLike
    normals: cv2.typing.MatLike
    polygons: cv2.typing.MatLike
    texture: cv2.typing.MatLike
    tcoords: cv2.typing.MatLike

    # Functions
    def __init__(self) -> None: ...


class WMesh:
    # Functions
    @typing.overload
    def __init__(self, mesh: Mesh) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, polygons: cv2.typing.MatLike, colors: cv2.typing.MatLike | None = ..., normals: cv2.typing.MatLike | None = ...) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, polygons: cv2.UMat, colors: cv2.UMat | None = ..., normals: cv2.UMat | None = ...) -> None: ...


class Color:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, gray: float) -> None: ...
    @typing.overload
    def __init__(self, blue: float, green: float, red: float) -> None: ...

    @classmethod
    def black(cls) -> Color: ...

    @classmethod
    def white(cls) -> Color: ...

    @classmethod
    def blue(cls) -> Color: ...

    @classmethod
    def green(cls) -> Color: ...

    @classmethod
    def red(cls) -> Color: ...

    @classmethod
    def cyan(cls) -> Color: ...

    @classmethod
    def yellow(cls) -> Color: ...

    @classmethod
    def magenta(cls) -> Color: ...

    @classmethod
    def gray(cls) -> Color: ...

    @classmethod
    def silver(cls) -> Color: ...

    @classmethod
    def mlab(cls) -> Color: ...

    @classmethod
    def navy(cls) -> Color: ...

    @classmethod
    def maroon(cls) -> Color: ...

    @classmethod
    def teal(cls) -> Color: ...

    @classmethod
    def olive(cls) -> Color: ...

    @classmethod
    def purple(cls) -> Color: ...

    @classmethod
    def azure(cls) -> Color: ...

    @classmethod
    def chartreuse(cls) -> Color: ...

    @classmethod
    def rose(cls) -> Color: ...

    @classmethod
    def lime(cls) -> Color: ...

    @classmethod
    def gold(cls) -> Color: ...

    @classmethod
    def orange(cls) -> Color: ...

    @classmethod
    def orange_red(cls) -> Color: ...

    @classmethod
    def indigo(cls) -> Color: ...

    @classmethod
    def brown(cls) -> Color: ...

    @classmethod
    def apricot(cls) -> Color: ...

    @classmethod
    def pink(cls) -> Color: ...

    @classmethod
    def raspberry(cls) -> Color: ...

    @classmethod
    def cherry(cls) -> Color: ...

    @classmethod
    def violet(cls) -> Color: ...

    @classmethod
    def amethyst(cls) -> Color: ...

    @classmethod
    def bluberry(cls) -> Color: ...

    @classmethod
    def celestial_blue(cls) -> Color: ...

    @classmethod
    def turquoise(cls) -> Color: ...

    def get_blue(self) -> float: ...

    def get_green(self) -> float: ...

    def get_red(self) -> float: ...


class Affine3d:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, rvec: cv2.typing.Vec3d, t: cv2.typing.Vec3d = ...) -> None: ...
    @typing.overload
    def __init__(self, rot: cv2.typing.MatLike, t: cv2.typing.Vec3f = ...) -> None: ...

    def translate(self, t: cv2.typing.Vec3d) -> Affine3d: ...

    def rotate(self, t: cv2.typing.Vec3d) -> Affine3d: ...

    def product(self, t: Affine3d) -> Affine3d: ...

    @classmethod
    def Identity(cls) -> Affine3d: ...

    def inv(self) -> Affine3d: ...

    def mat(self) -> cv2.typing.MatLike: ...


class WLine:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pt1: cv2.typing.Point3d, pt2: cv2.typing.Point3d, color: Color) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WPlane:
    # Functions
    @typing.overload
    def __init__(self, size: cv2.typing.Point2d = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, center: cv2.typing.Point3d, normal: cv2.typing.Vec3d, new_yaxis: cv2.typing.Vec3d, size: cv2.typing.Point2d = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WSphere:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, center: cv2.typing.Point3d, radius: float, sphere_resolution: int = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WArrow:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pt1: cv2.typing.Point3d, pt2: cv2.typing.Point3d, thickness: float = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCube:
    # Functions
    def __init__(self, min_point: cv2.typing.Point3d = ..., max_point: cv2.typing.Point3d = ..., wire_frame: bool = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCircle:
    # Functions
    @typing.overload
    def __init__(self, radius: float, thickness: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, radius: float, center: cv2.typing.Point3d, normal: cv2.typing.Vec3d, thickness: float = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCone:
    # Functions
    @typing.overload
    def __init__(self, length: float, radius: float, resolution: int = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, radius: float, center: cv2.typing.Point3d, tip: cv2.typing.Point3d, resolution: int = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCylinder:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, axis_point1: cv2.typing.Point3d, axis_point2: cv2.typing.Point3d, radius: float, numsides: int = ..., color: Color = ...) -> None: ...


class WCameraPosition:
    # Functions
    @typing.overload
    def __init__(self, scale: float = ...) -> None: ...
    @typing.overload
    def __init__(self, K: cv2.typing.MatLike, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, K: cv2.UMat, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, K: cv2.typing.MatLike, image: cv2.typing.MatLike, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, K: cv2.UMat, image: cv2.UMat, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, fov: cv2.typing.Point2d, image: cv2.typing.MatLike, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, fov: cv2.typing.Point2d, image: cv2.UMat, scale: float = ..., color: Color = ...) -> None: ...


class WCoordinateSystem:
    # Functions
    def __init__(self, scale: float = ...) -> None: ...


class WCloud:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, colors: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, colors: cv2.UMat) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, colors: cv2.typing.MatLike, normals: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, colors: cv2.UMat, normals: cv2.UMat) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, color: Color, normals: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, color: Color, normals: cv2.UMat) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WPolyLine:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, points: cv2.typing.MatLike, colors: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def __init__(self, points: cv2.UMat, colors: cv2.UMat) -> None: ...
    @typing.overload
    def __init__(self, points: cv2.typing.MatLike, color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, points: cv2.UMat, color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WText:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str, pos: cv2.typing.Point, font_size: int = ..., color: Color = ...) -> None: ...

    def setText(self, text: str) -> None: ...

    def getText(self) -> str: ...


class WText3D:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str, position: cv2.typing.Point3d, text_scale: float = ..., face_camera: bool = ..., color: Color = ...) -> None: ...

    def setText(self, text: str) -> None: ...

    def getText(self) -> str: ...


class WImageOverlay:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.typing.MatLike, rect: cv2.typing.Rect) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.UMat, rect: cv2.typing.Rect) -> None: ...

    @typing.overload
    def setImage(self, image: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def setImage(self, image: cv2.UMat) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WImage3D:
    # Functions
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.typing.MatLike, size: cv2.typing.Point2d) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.UMat, size: cv2.typing.Point2d) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.typing.MatLike, size: cv2.typing.Point2d, center: cv2.typing.Vec3d, normal: cv2.typing.Vec3d, up_vector: cv2.typing.Vec3d) -> None: ...
    @typing.overload
    def __init__(self, image: cv2.UMat, size: cv2.typing.Point2d, center: cv2.typing.Vec3d, normal: cv2.typing.Vec3d, up_vector: cv2.typing.Vec3d) -> None: ...

    @typing.overload
    def setImage(self, image: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def setImage(self, image: cv2.UMat) -> None: ...

    def setSize(self, size: cv2.typing.Size) -> None: ...


class WGrid:
    # Functions
    @typing.overload
    def __init__(self, cells: cv2.typing.MatLike, cells_spacing: cv2.typing.MatLike, color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, cells: cv2.UMat, cells_spacing: cv2.UMat, color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, center: cv2.typing.Point3d, normal: cv2.typing.Vec3d, new_yaxis: cv2.typing.Vec3d, cells: cv2.typing.Vec2i = ..., cells_spacing: cv2.typing.Vec2d = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WTrajectory:
    # Functions
    @typing.overload
    def __init__(self, path: cv2.typing.MatLike, display_mode: int = ..., scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, path: cv2.UMat, display_mode: int = ..., scale: float = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WTrajectoryFrustums:
    # Functions
    @typing.overload
    def __init__(self, path: cv2.typing.MatLike, K: cv2.typing.MatLike, scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, path: cv2.UMat, K: cv2.UMat, scale: float = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WTrajectorySpheres:
    # Functions
    @typing.overload
    def __init__(self, path: cv2.typing.MatLike, line_length: float = ..., radius: float = ..., from_: Color = ..., to: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, path: cv2.UMat, line_length: float = ..., radius: float = ..., from_: Color = ..., to: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WPaintedCloud:
    # Functions
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, p1: cv2.typing.Point3d, p2: cv2.typing.Point3d) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, p1: cv2.typing.Point3d, p2: cv2.typing.Point3d) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, p1: cv2.typing.Point3d, p2: cv2.typing.Point3d, c1: Color, c2: Color) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, p1: cv2.typing.Point3d, p2: cv2.typing.Point3d, c1: Color, c2: Color) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCloudCollection:
    # Functions
    def __init__(self) -> None: ...

    @typing.overload
    def addCloud(self, cloud: cv2.typing.MatLike, colors: cv2.typing.MatLike, pose: Affine3d = ...) -> None: ...
    @typing.overload
    def addCloud(self, cloud: cv2.UMat, colors: cv2.UMat, pose: Affine3d = ...) -> None: ...
    @typing.overload
    def addCloud(self, cloud: cv2.typing.MatLike, color: Color = ..., pose: Affine3d = ...) -> None: ...
    @typing.overload
    def addCloud(self, cloud: cv2.UMat, color: Color = ..., pose: Affine3d = ...) -> None: ...

    def finalize(self) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class WCloudNormals:
    # Functions
    @typing.overload
    def __init__(self, cloud: cv2.typing.MatLike, normals: cv2.typing.MatLike, level: int = ..., scale: float = ..., color: Color = ...) -> None: ...
    @typing.overload
    def __init__(self, cloud: cv2.UMat, normals: cv2.UMat, level: int = ..., scale: float = ..., color: Color = ...) -> None: ...

    def setRenderingProperty(self, property: int, value: float) -> None: ...


class Viz3d:
    # Functions
    def __init__(self, window_name: str = ...) -> None: ...

    @classmethod
    def create(cls, window_name: str = ...) -> Viz3d: ...

    @typing.overload
    def showWidget(self, id: str, widget: WLine) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WLine, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WSphere) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WSphere, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCameraPosition) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCameraPosition, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WArrow) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WArrow, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCircle) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCircle, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPlane) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPlane, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCone) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCone, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCube) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCube, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCylinder) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCylinder, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCoordinateSystem) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPaintedCloud) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPaintedCloud, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloudCollection) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloudCollection, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WGrid) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WGrid, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WMesh) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WMesh, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPolyLine) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WPolyLine, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloud) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloud, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WImage3D, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WImage3D) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WImageOverlay, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WImageOverlay) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WText) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WText, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WText3D) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WText3D, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloudNormals, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WCloudNormals) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectory, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectory) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectorySpheres, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectorySpheres) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectoryFrustums, pose: Affine3d) -> None: ...
    @typing.overload
    def showWidget(self, id: str, widget: WTrajectoryFrustums) -> None: ...

    def removeWidget(self, id: str) -> None: ...

    def removeAllWidgets(self) -> None: ...

    @typing.overload
    def showImage(self, image: cv2.typing.MatLike, window_size: cv2.typing.Size = ...) -> None: ...
    @typing.overload
    def showImage(self, image: cv2.UMat, window_size: cv2.typing.Size = ...) -> None: ...

    def setWidgetPose(self, id: str, pose: Affine3d) -> None: ...

    def updateWidgetPose(self, id: str, pose: Affine3d) -> None: ...

    def getWidgetPose(self, id: str) -> Affine3d: ...

    def getViewerPose(self) -> Affine3d: ...

    def setViewerPose(self, pose: Affine3d) -> None: ...

    def resetCameraViewpoint(self, id: str) -> None: ...

    def resetCamera(self) -> None: ...

    def convertToWindowCoordinates(self, pt: cv2.typing.Point3d) -> cv2.typing.Point3d: ...

    def getWindowSize(self) -> cv2.typing.Size: ...

    def setWindowSize(self, window_size: cv2.typing.Size) -> None: ...

    def getWindowName(self) -> str: ...

    def getScreenshot(self) -> cv2.typing.MatLike: ...

    def saveScreenshot(self, file: str) -> None: ...

    def setWindowPosition(self, window_position: cv2.typing.Point) -> None: ...

    def setFullScreen(self, mode: bool = ...) -> None: ...

    def setBackgroundColor(self, color: Color, color2: Color = ...) -> None: ...

    @typing.overload
    def setBackgroundTexture(self, image: cv2.typing.MatLike | None = ...) -> None: ...
    @typing.overload
    def setBackgroundTexture(self, image: cv2.UMat | None = ...) -> None: ...

    def setBackgroundMeshLab(self) -> None: ...

    def spin(self) -> None: ...

    def spinOnce(self, time: int = ..., force_redraw: bool = ...) -> None: ...

    def setOffScreenRendering(self) -> None: ...

    def removeAllLights(self) -> None: ...

    def wasStopped(self) -> bool: ...

    def close(self) -> None: ...

    def setRenderingProperty(self, id: str, property: int, value: float) -> None: ...

    def getRenderingProperty(self, id: str, property: int) -> float: ...

    def setRepresentation(self, representation: int) -> None: ...

    def setGlobalWarnings(self, enabled: bool = ...) -> None: ...



# Functions
@typing.overload
def computeNormals(mesh: Mesh, normals: cv2.typing.MatLike | None = ...) -> cv2.typing.MatLike: ...
@typing.overload
def computeNormals(mesh: Mesh, normals: cv2.UMat | None = ...) -> cv2.UMat: ...

def makeCameraPose(position: cv2.typing.Vec3d, focal_point: cv2.typing.Vec3d, y_dir: cv2.typing.Vec3d) -> Affine3d: ...

def makeTransformToGlobal(axis_x: cv2.typing.Vec3d, axis_y: cv2.typing.Vec3d, axis_z: cv2.typing.Vec3d, origin: cv2.typing.Vec3d = ...) -> Affine3d: ...

@typing.overload
def readCloud(file: str, colors: cv2.typing.MatLike | None = ..., normals: cv2.typing.MatLike | None = ...) -> tuple[cv2.typing.MatLike, cv2.typing.MatLike, cv2.typing.MatLike]: ...
@typing.overload
def readCloud(file: str, colors: cv2.UMat | None = ..., normals: cv2.UMat | None = ...) -> tuple[cv2.typing.MatLike, cv2.UMat, cv2.UMat]: ...

def readMesh(file: str) -> Mesh: ...

@typing.overload
def writeCloud(file: str, cloud: cv2.typing.MatLike, colors: cv2.typing.MatLike | None = ..., normals: cv2.typing.MatLike | None = ..., binary: bool = ...) -> None: ...
@typing.overload
def writeCloud(file: str, cloud: cv2.UMat, colors: cv2.UMat | None = ..., normals: cv2.UMat | None = ..., binary: bool = ...) -> None: ...


